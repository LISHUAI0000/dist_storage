// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_serv.proto

#ifndef PROTOBUF_data_5fserv_2eproto__INCLUDED
#define PROTOBUF_data_5fserv_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dist_storage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_data_5fserv_2eproto();
void protobuf_AssignDesc_data_5fserv_2eproto();
void protobuf_ShutdownFile_data_5fserv_2eproto();

class DSRequest;
class DSResponse;

enum DSCode {
  DS_SUC = 0,
  DS_ERR = 1,
  DS_NOFOUND = 2
};
bool DSCode_IsValid(int value);
const DSCode DSCode_MIN = DS_SUC;
const DSCode DSCode_MAX = DS_NOFOUND;
const int DSCode_ARRAYSIZE = DSCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DSCode_descriptor();
inline const ::std::string& DSCode_Name(DSCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DSCode_descriptor(), value);
}
inline bool DSCode_Parse(
    const ::std::string& name, DSCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DSCode>(
    DSCode_descriptor(), name, value);
}
// ===================================================================

class DSRequest : public ::google::protobuf::Message {
 public:
  DSRequest();
  virtual ~DSRequest();

  DSRequest(const DSRequest& from);

  inline DSRequest& operator=(const DSRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DSRequest& default_instance();

  void Swap(DSRequest* other);

  // implements Message ----------------------------------------------

  DSRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DSRequest& from);
  void MergeFrom(const DSRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ds_key = 1 [default = ""];
  inline bool has_ds_key() const;
  inline void clear_ds_key();
  static const int kDsKeyFieldNumber = 1;
  inline const ::std::string& ds_key() const;
  inline void set_ds_key(const ::std::string& value);
  inline void set_ds_key(const char* value);
  inline void set_ds_key(const char* value, size_t size);
  inline ::std::string* mutable_ds_key();
  inline ::std::string* release_ds_key();
  inline void set_allocated_ds_key(::std::string* ds_key);

  // optional string ds_value = 2 [default = ""];
  inline bool has_ds_value() const;
  inline void clear_ds_value();
  static const int kDsValueFieldNumber = 2;
  inline const ::std::string& ds_value() const;
  inline void set_ds_value(const ::std::string& value);
  inline void set_ds_value(const char* value);
  inline void set_ds_value(const char* value, size_t size);
  inline ::std::string* mutable_ds_value();
  inline ::std::string* release_ds_value();
  inline void set_allocated_ds_value(::std::string* ds_value);

  // @@protoc_insertion_point(class_scope:dist_storage.DSRequest)
 private:
  inline void set_has_ds_key();
  inline void clear_has_ds_key();
  inline void set_has_ds_value();
  inline void clear_has_ds_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ds_key_;
  ::std::string* ds_value_;
  friend void  protobuf_AddDesc_data_5fserv_2eproto();
  friend void protobuf_AssignDesc_data_5fserv_2eproto();
  friend void protobuf_ShutdownFile_data_5fserv_2eproto();

  void InitAsDefaultInstance();
  static DSRequest* default_instance_;
};
// -------------------------------------------------------------------

class DSResponse : public ::google::protobuf::Message {
 public:
  DSResponse();
  virtual ~DSResponse();

  DSResponse(const DSResponse& from);

  inline DSResponse& operator=(const DSResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DSResponse& default_instance();

  void Swap(DSResponse* other);

  // implements Message ----------------------------------------------

  DSResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DSResponse& from);
  void MergeFrom(const DSResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dist_storage.DSCode code = 1 [default = DS_SUC];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::dist_storage::DSCode code() const;
  inline void set_code(::dist_storage::DSCode value);

  // optional string ds_res = 2 [default = "NULL"];
  inline bool has_ds_res() const;
  inline void clear_ds_res();
  static const int kDsResFieldNumber = 2;
  inline const ::std::string& ds_res() const;
  inline void set_ds_res(const ::std::string& value);
  inline void set_ds_res(const char* value);
  inline void set_ds_res(const char* value, size_t size);
  inline ::std::string* mutable_ds_res();
  inline ::std::string* release_ds_res();
  inline void set_allocated_ds_res(::std::string* ds_res);

  // @@protoc_insertion_point(class_scope:dist_storage.DSResponse)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_ds_res();
  inline void clear_has_ds_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_ds_res_;
  ::std::string* ds_res_;
  int code_;
  friend void  protobuf_AddDesc_data_5fserv_2eproto();
  friend void protobuf_AssignDesc_data_5fserv_2eproto();
  friend void protobuf_ShutdownFile_data_5fserv_2eproto();

  void InitAsDefaultInstance();
  static DSResponse* default_instance_;
};
// ===================================================================

class DataService_Stub;

class DataService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DataService() {};
 public:
  virtual ~DataService();

  typedef DataService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Put(::google::protobuf::RpcController* controller,
                       const ::dist_storage::DSRequest* request,
                       ::dist_storage::DSResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Get(::google::protobuf::RpcController* controller,
                       const ::dist_storage::DSRequest* request,
                       ::dist_storage::DSResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Delete(::google::protobuf::RpcController* controller,
                       const ::dist_storage::DSRequest* request,
                       ::dist_storage::DSResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DataService);
};

class DataService_Stub : public DataService {
 public:
  DataService_Stub(::google::protobuf::RpcChannel* channel);
  DataService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~DataService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements DataService ------------------------------------------

  void Put(::google::protobuf::RpcController* controller,
                       const ::dist_storage::DSRequest* request,
                       ::dist_storage::DSResponse* response,
                       ::google::protobuf::Closure* done);
  void Get(::google::protobuf::RpcController* controller,
                       const ::dist_storage::DSRequest* request,
                       ::dist_storage::DSResponse* response,
                       ::google::protobuf::Closure* done);
  void Delete(::google::protobuf::RpcController* controller,
                       const ::dist_storage::DSRequest* request,
                       ::dist_storage::DSResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DataService_Stub);
};


// ===================================================================


// ===================================================================

// DSRequest

// optional string ds_key = 1 [default = ""];
inline bool DSRequest::has_ds_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DSRequest::set_has_ds_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DSRequest::clear_has_ds_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DSRequest::clear_ds_key() {
  if (ds_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ds_key_->clear();
  }
  clear_has_ds_key();
}
inline const ::std::string& DSRequest::ds_key() const {
  // @@protoc_insertion_point(field_get:dist_storage.DSRequest.ds_key)
  return *ds_key_;
}
inline void DSRequest::set_ds_key(const ::std::string& value) {
  set_has_ds_key();
  if (ds_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ds_key_ = new ::std::string;
  }
  ds_key_->assign(value);
  // @@protoc_insertion_point(field_set:dist_storage.DSRequest.ds_key)
}
inline void DSRequest::set_ds_key(const char* value) {
  set_has_ds_key();
  if (ds_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ds_key_ = new ::std::string;
  }
  ds_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:dist_storage.DSRequest.ds_key)
}
inline void DSRequest::set_ds_key(const char* value, size_t size) {
  set_has_ds_key();
  if (ds_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ds_key_ = new ::std::string;
  }
  ds_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dist_storage.DSRequest.ds_key)
}
inline ::std::string* DSRequest::mutable_ds_key() {
  set_has_ds_key();
  if (ds_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ds_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dist_storage.DSRequest.ds_key)
  return ds_key_;
}
inline ::std::string* DSRequest::release_ds_key() {
  clear_has_ds_key();
  if (ds_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ds_key_;
    ds_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DSRequest::set_allocated_ds_key(::std::string* ds_key) {
  if (ds_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ds_key_;
  }
  if (ds_key) {
    set_has_ds_key();
    ds_key_ = ds_key;
  } else {
    clear_has_ds_key();
    ds_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dist_storage.DSRequest.ds_key)
}

// optional string ds_value = 2 [default = ""];
inline bool DSRequest::has_ds_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DSRequest::set_has_ds_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DSRequest::clear_has_ds_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DSRequest::clear_ds_value() {
  if (ds_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ds_value_->clear();
  }
  clear_has_ds_value();
}
inline const ::std::string& DSRequest::ds_value() const {
  // @@protoc_insertion_point(field_get:dist_storage.DSRequest.ds_value)
  return *ds_value_;
}
inline void DSRequest::set_ds_value(const ::std::string& value) {
  set_has_ds_value();
  if (ds_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ds_value_ = new ::std::string;
  }
  ds_value_->assign(value);
  // @@protoc_insertion_point(field_set:dist_storage.DSRequest.ds_value)
}
inline void DSRequest::set_ds_value(const char* value) {
  set_has_ds_value();
  if (ds_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ds_value_ = new ::std::string;
  }
  ds_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:dist_storage.DSRequest.ds_value)
}
inline void DSRequest::set_ds_value(const char* value, size_t size) {
  set_has_ds_value();
  if (ds_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ds_value_ = new ::std::string;
  }
  ds_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dist_storage.DSRequest.ds_value)
}
inline ::std::string* DSRequest::mutable_ds_value() {
  set_has_ds_value();
  if (ds_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ds_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dist_storage.DSRequest.ds_value)
  return ds_value_;
}
inline ::std::string* DSRequest::release_ds_value() {
  clear_has_ds_value();
  if (ds_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ds_value_;
    ds_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DSRequest::set_allocated_ds_value(::std::string* ds_value) {
  if (ds_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ds_value_;
  }
  if (ds_value) {
    set_has_ds_value();
    ds_value_ = ds_value;
  } else {
    clear_has_ds_value();
    ds_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dist_storage.DSRequest.ds_value)
}

// -------------------------------------------------------------------

// DSResponse

// optional .dist_storage.DSCode code = 1 [default = DS_SUC];
inline bool DSResponse::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DSResponse::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DSResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DSResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::dist_storage::DSCode DSResponse::code() const {
  // @@protoc_insertion_point(field_get:dist_storage.DSResponse.code)
  return static_cast< ::dist_storage::DSCode >(code_);
}
inline void DSResponse::set_code(::dist_storage::DSCode value) {
  assert(::dist_storage::DSCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:dist_storage.DSResponse.code)
}

// optional string ds_res = 2 [default = "NULL"];
inline bool DSResponse::has_ds_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DSResponse::set_has_ds_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DSResponse::clear_has_ds_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DSResponse::clear_ds_res() {
  if (ds_res_ != _default_ds_res_) {
    ds_res_->assign(*_default_ds_res_);
  }
  clear_has_ds_res();
}
inline const ::std::string& DSResponse::ds_res() const {
  // @@protoc_insertion_point(field_get:dist_storage.DSResponse.ds_res)
  return *ds_res_;
}
inline void DSResponse::set_ds_res(const ::std::string& value) {
  set_has_ds_res();
  if (ds_res_ == _default_ds_res_) {
    ds_res_ = new ::std::string;
  }
  ds_res_->assign(value);
  // @@protoc_insertion_point(field_set:dist_storage.DSResponse.ds_res)
}
inline void DSResponse::set_ds_res(const char* value) {
  set_has_ds_res();
  if (ds_res_ == _default_ds_res_) {
    ds_res_ = new ::std::string;
  }
  ds_res_->assign(value);
  // @@protoc_insertion_point(field_set_char:dist_storage.DSResponse.ds_res)
}
inline void DSResponse::set_ds_res(const char* value, size_t size) {
  set_has_ds_res();
  if (ds_res_ == _default_ds_res_) {
    ds_res_ = new ::std::string;
  }
  ds_res_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dist_storage.DSResponse.ds_res)
}
inline ::std::string* DSResponse::mutable_ds_res() {
  set_has_ds_res();
  if (ds_res_ == _default_ds_res_) {
    ds_res_ = new ::std::string(*_default_ds_res_);
  }
  // @@protoc_insertion_point(field_mutable:dist_storage.DSResponse.ds_res)
  return ds_res_;
}
inline ::std::string* DSResponse::release_ds_res() {
  clear_has_ds_res();
  if (ds_res_ == _default_ds_res_) {
    return NULL;
  } else {
    ::std::string* temp = ds_res_;
    ds_res_ = const_cast< ::std::string*>(_default_ds_res_);
    return temp;
  }
}
inline void DSResponse::set_allocated_ds_res(::std::string* ds_res) {
  if (ds_res_ != _default_ds_res_) {
    delete ds_res_;
  }
  if (ds_res) {
    set_has_ds_res();
    ds_res_ = ds_res;
  } else {
    clear_has_ds_res();
    ds_res_ = const_cast< ::std::string*>(_default_ds_res_);
  }
  // @@protoc_insertion_point(field_set_allocated:dist_storage.DSResponse.ds_res)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dist_storage

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dist_storage::DSCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dist_storage::DSCode>() {
  return ::dist_storage::DSCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_5fserv_2eproto__INCLUDED
