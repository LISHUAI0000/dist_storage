// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_serv.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data_serv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dist_storage {

namespace {

const ::google::protobuf::Descriptor* DSRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DSRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DSResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DSResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DSCode_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* DataService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_5fserv_2eproto() {
  protobuf_AddDesc_data_5fserv_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data_serv.proto");
  GOOGLE_CHECK(file != NULL);
  DSRequest_descriptor_ = file->message_type(0);
  static const int DSRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSRequest, ds_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSRequest, ds_value_),
  };
  DSRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DSRequest_descriptor_,
      DSRequest::default_instance_,
      DSRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DSRequest));
  DSResponse_descriptor_ = file->message_type(1);
  static const int DSResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSResponse, ds_res_),
  };
  DSResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DSResponse_descriptor_,
      DSResponse::default_instance_,
      DSResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DSResponse));
  DSCode_descriptor_ = file->enum_type(0);
  DataService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_5fserv_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DSRequest_descriptor_, &DSRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DSResponse_descriptor_, &DSResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_5fserv_2eproto() {
  delete DSRequest::default_instance_;
  delete DSRequest_reflection_;
  delete DSResponse::default_instance_;
  delete DSResponse_reflection_;
  delete DSResponse::_default_ds_res_;
}

void protobuf_AddDesc_data_5fserv_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017data_serv.proto\022\014dist_storage\"1\n\tDSReq"
    "uest\022\020\n\006ds_key\030\001 \001(\t:\000\022\022\n\010ds_value\030\002 \001(\t"
    ":\000\"K\n\nDSResponse\022\'\n\004code\030\001 \001(\0162\024.dist_st"
    "orage.DSCode:\003SUC\022\024\n\006ds_res\030\002 \001(\t:\004NULL*"
    "\'\n\006DSCode\022\007\n\003SUC\020\000\022\007\n\003ERR\020\001\022\013\n\007NOFOUND\020\002"
    "2\276\001\n\013DataService\0228\n\003Put\022\027.dist_storage.D"
    "SRequest\032\030.dist_storage.DSResponse\0228\n\003Ge"
    "t\022\027.dist_storage.DSRequest\032\030.dist_storag"
    "e.DSResponse\022;\n\006Delete\022\027.dist_storage.DS"
    "Request\032\030.dist_storage.DSResponseB\003\200\001\001", 398);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data_serv.proto", &protobuf_RegisterTypes);
  DSRequest::default_instance_ = new DSRequest();
  DSResponse::_default_ds_res_ =
      new ::std::string("NULL", 4);
  DSResponse::default_instance_ = new DSResponse();
  DSRequest::default_instance_->InitAsDefaultInstance();
  DSResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_5fserv_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_5fserv_2eproto {
  StaticDescriptorInitializer_data_5fserv_2eproto() {
    protobuf_AddDesc_data_5fserv_2eproto();
  }
} static_descriptor_initializer_data_5fserv_2eproto_;
const ::google::protobuf::EnumDescriptor* DSCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DSCode_descriptor_;
}
bool DSCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DSRequest::kDsKeyFieldNumber;
const int DSRequest::kDsValueFieldNumber;
#endif  // !_MSC_VER

DSRequest::DSRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dist_storage.DSRequest)
}

void DSRequest::InitAsDefaultInstance() {
}

DSRequest::DSRequest(const DSRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dist_storage.DSRequest)
}

void DSRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ds_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ds_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DSRequest::~DSRequest() {
  // @@protoc_insertion_point(destructor:dist_storage.DSRequest)
  SharedDtor();
}

void DSRequest::SharedDtor() {
  if (ds_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ds_key_;
  }
  if (ds_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ds_value_;
  }
  if (this != default_instance_) {
  }
}

void DSRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DSRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DSRequest_descriptor_;
}

const DSRequest& DSRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fserv_2eproto();
  return *default_instance_;
}

DSRequest* DSRequest::default_instance_ = NULL;

DSRequest* DSRequest::New() const {
  return new DSRequest;
}

void DSRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ds_key()) {
      if (ds_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ds_key_->clear();
      }
    }
    if (has_ds_value()) {
      if (ds_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ds_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DSRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dist_storage.DSRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ds_key = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ds_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ds_key().data(), this->ds_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ds_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ds_value;
        break;
      }

      // optional string ds_value = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_ds_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ds_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ds_value().data(), this->ds_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ds_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dist_storage.DSRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dist_storage.DSRequest)
  return false;
#undef DO_
}

void DSRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dist_storage.DSRequest)
  // optional string ds_key = 1 [default = ""];
  if (has_ds_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ds_key().data(), this->ds_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ds_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ds_key(), output);
  }

  // optional string ds_value = 2 [default = ""];
  if (has_ds_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ds_value().data(), this->ds_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ds_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ds_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dist_storage.DSRequest)
}

::google::protobuf::uint8* DSRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dist_storage.DSRequest)
  // optional string ds_key = 1 [default = ""];
  if (has_ds_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ds_key().data(), this->ds_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ds_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ds_key(), target);
  }

  // optional string ds_value = 2 [default = ""];
  if (has_ds_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ds_value().data(), this->ds_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ds_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ds_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dist_storage.DSRequest)
  return target;
}

int DSRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ds_key = 1 [default = ""];
    if (has_ds_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ds_key());
    }

    // optional string ds_value = 2 [default = ""];
    if (has_ds_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ds_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DSRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DSRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DSRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DSRequest::MergeFrom(const DSRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ds_key()) {
      set_ds_key(from.ds_key());
    }
    if (from.has_ds_value()) {
      set_ds_value(from.ds_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DSRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DSRequest::CopyFrom(const DSRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSRequest::IsInitialized() const {

  return true;
}

void DSRequest::Swap(DSRequest* other) {
  if (other != this) {
    std::swap(ds_key_, other->ds_key_);
    std::swap(ds_value_, other->ds_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DSRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DSRequest_descriptor_;
  metadata.reflection = DSRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* DSResponse::_default_ds_res_ = NULL;
#ifndef _MSC_VER
const int DSResponse::kCodeFieldNumber;
const int DSResponse::kDsResFieldNumber;
#endif  // !_MSC_VER

DSResponse::DSResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dist_storage.DSResponse)
}

void DSResponse::InitAsDefaultInstance() {
}

DSResponse::DSResponse(const DSResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dist_storage.DSResponse)
}

void DSResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  ds_res_ = const_cast< ::std::string*>(_default_ds_res_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DSResponse::~DSResponse() {
  // @@protoc_insertion_point(destructor:dist_storage.DSResponse)
  SharedDtor();
}

void DSResponse::SharedDtor() {
  if (ds_res_ != _default_ds_res_) {
    delete ds_res_;
  }
  if (this != default_instance_) {
  }
}

void DSResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DSResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DSResponse_descriptor_;
}

const DSResponse& DSResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fserv_2eproto();
  return *default_instance_;
}

DSResponse* DSResponse::default_instance_ = NULL;

DSResponse* DSResponse::New() const {
  return new DSResponse;
}

void DSResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    code_ = 0;
    if (has_ds_res()) {
      if (ds_res_ != _default_ds_res_) {
        ds_res_->assign(*_default_ds_res_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DSResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dist_storage.DSResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dist_storage.DSCode code = 1 [default = SUC];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dist_storage::DSCode_IsValid(value)) {
            set_code(static_cast< ::dist_storage::DSCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ds_res;
        break;
      }

      // optional string ds_res = 2 [default = "NULL"];
      case 2: {
        if (tag == 18) {
         parse_ds_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ds_res()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ds_res().data(), this->ds_res().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ds_res");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dist_storage.DSResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dist_storage.DSResponse)
  return false;
#undef DO_
}

void DSResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dist_storage.DSResponse)
  // optional .dist_storage.DSCode code = 1 [default = SUC];
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional string ds_res = 2 [default = "NULL"];
  if (has_ds_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ds_res().data(), this->ds_res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ds_res");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ds_res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dist_storage.DSResponse)
}

::google::protobuf::uint8* DSResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dist_storage.DSResponse)
  // optional .dist_storage.DSCode code = 1 [default = SUC];
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional string ds_res = 2 [default = "NULL"];
  if (has_ds_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ds_res().data(), this->ds_res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ds_res");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ds_res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dist_storage.DSResponse)
  return target;
}

int DSResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dist_storage.DSCode code = 1 [default = SUC];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional string ds_res = 2 [default = "NULL"];
    if (has_ds_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ds_res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DSResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DSResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DSResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DSResponse::MergeFrom(const DSResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_ds_res()) {
      set_ds_res(from.ds_res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DSResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DSResponse::CopyFrom(const DSResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSResponse::IsInitialized() const {

  return true;
}

void DSResponse::Swap(DSResponse* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(ds_res_, other->ds_res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DSResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DSResponse_descriptor_;
  metadata.reflection = DSResponse_reflection_;
  return metadata;
}


// ===================================================================

DataService::~DataService() {}

const ::google::protobuf::ServiceDescriptor* DataService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* DataService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataService_descriptor_;
}

void DataService::Put(::google::protobuf::RpcController* controller,
                         const ::dist_storage::DSRequest*,
                         ::dist_storage::DSResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Put() not implemented.");
  done->Run();
}

void DataService::Get(::google::protobuf::RpcController* controller,
                         const ::dist_storage::DSRequest*,
                         ::dist_storage::DSResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Get() not implemented.");
  done->Run();
}

void DataService::Delete(::google::protobuf::RpcController* controller,
                         const ::dist_storage::DSRequest*,
                         ::dist_storage::DSResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Delete() not implemented.");
  done->Run();
}

void DataService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), DataService_descriptor_);
  switch(method->index()) {
    case 0:
      Put(controller,
             ::google::protobuf::down_cast<const ::dist_storage::DSRequest*>(request),
             ::google::protobuf::down_cast< ::dist_storage::DSResponse*>(response),
             done);
      break;
    case 1:
      Get(controller,
             ::google::protobuf::down_cast<const ::dist_storage::DSRequest*>(request),
             ::google::protobuf::down_cast< ::dist_storage::DSResponse*>(response),
             done);
      break;
    case 2:
      Delete(controller,
             ::google::protobuf::down_cast<const ::dist_storage::DSRequest*>(request),
             ::google::protobuf::down_cast< ::dist_storage::DSResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& DataService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dist_storage::DSRequest::default_instance();
    case 1:
      return ::dist_storage::DSRequest::default_instance();
    case 2:
      return ::dist_storage::DSRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& DataService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dist_storage::DSResponse::default_instance();
    case 1:
      return ::dist_storage::DSResponse::default_instance();
    case 2:
      return ::dist_storage::DSResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

DataService_Stub::DataService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DataService_Stub::DataService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
DataService_Stub::~DataService_Stub() {
  if (owns_channel_) delete channel_;
}

void DataService_Stub::Put(::google::protobuf::RpcController* controller,
                              const ::dist_storage::DSRequest* request,
                              ::dist_storage::DSResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DataService_Stub::Get(::google::protobuf::RpcController* controller,
                              const ::dist_storage::DSRequest* request,
                              ::dist_storage::DSResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void DataService_Stub::Delete(::google::protobuf::RpcController* controller,
                              const ::dist_storage::DSRequest* request,
                              ::dist_storage::DSResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace dist_storage

// @@protoc_insertion_point(global_scope)
