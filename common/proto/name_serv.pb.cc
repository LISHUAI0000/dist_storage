// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: name_serv.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "name_serv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dist_storage {

namespace {

const ::google::protobuf::Descriptor* HBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bucket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bucket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNSRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNSRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNSResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNSResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NSCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeAction_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* NameService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_name_5fserv_2eproto() {
  protobuf_AddDesc_name_5fserv_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "name_serv.proto");
  GOOGLE_CHECK(file != NULL);
  HBRequest_descriptor_ = file->message_type(0);
  static const int HBRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBRequest, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBRequest, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBRequest, updated_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBRequest, disk_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBRequest, mem_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBRequest, visit_flow_),
  };
  HBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HBRequest_descriptor_,
      HBRequest::default_instance_,
      HBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HBRequest));
  HBResponse_descriptor_ = file->message_type(1);
  static const int HBResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBResponse, code_),
  };
  HBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HBResponse_descriptor_,
      HBResponse::default_instance_,
      HBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HBResponse));
  Bucket_descriptor_ = file->message_type(2);
  static const int Bucket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bucket, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bucket, node_list_),
  };
  Bucket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bucket_descriptor_,
      Bucket::default_instance_,
      Bucket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bucket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bucket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bucket));
  CNSRequest_descriptor_ = file->message_type(3);
  static const int CNSRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNSRequest, dist_alg_),
  };
  CNSRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNSRequest_descriptor_,
      CNSRequest::default_instance_,
      CNSRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNSRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNSRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNSRequest));
  CNSResponse_descriptor_ = file->message_type(4);
  static const int CNSResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNSResponse, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNSResponse, bucket_list_),
  };
  CNSResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNSResponse_descriptor_,
      CNSResponse::default_instance_,
      CNSResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNSResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNSResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNSResponse));
  NSCode_descriptor_ = file->enum_type(0);
  NodeAction_descriptor_ = file->enum_type(1);
  NameService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_name_5fserv_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HBRequest_descriptor_, &HBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HBResponse_descriptor_, &HBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bucket_descriptor_, &Bucket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNSRequest_descriptor_, &CNSRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNSResponse_descriptor_, &CNSResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_name_5fserv_2eproto() {
  delete HBRequest::default_instance_;
  delete HBRequest_reflection_;
  delete HBResponse::default_instance_;
  delete HBResponse_reflection_;
  delete Bucket::default_instance_;
  delete Bucket_reflection_;
  delete CNSRequest::default_instance_;
  delete CNSRequest_reflection_;
  delete CNSRequest::_default_dist_alg_;
  delete CNSResponse::default_instance_;
  delete CNSResponse_reflection_;
}

void protobuf_AddDesc_name_5fserv_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017name_serv.proto\022\014dist_storage\"\247\001\n\tHBRe"
    "quest\022\016\n\004host\030\001 \001(\t:\000\022-\n\006action\030\002 \001(\0162\030."
    "dist_storage.NodeAction:\003NUL\022\027\n\014updated_"
    "time\030\003 \001(\003:\0010\022\025\n\ndisk_space\030\004 \001(\003:\0010\022\024\n\t"
    "mem_space\030\005 \001(\003:\0010\022\025\n\nvisit_flow\030\006 \001(\003:\001"
    "0\"8\n\nHBResponse\022*\n\004code\030\001 \001(\0162\024.dist_sto"
    "rage.NSCode:\006NS_SUC\"+\n\006Bucket\022\016\n\006number\030"
    "\001 \002(\004\022\021\n\tnode_list\030\002 \003(\t\"&\n\nCNSRequest\022\030"
    "\n\010dist_alg\030\001 \001(\t:\006ketama\"Q\n\013CNSResponse\022"
    "\027\n\010ret_code\030\001 \001(\010:\005false\022)\n\013bucket_list\030"
    "\002 \003(\0132\024.dist_storage.Bucket* \n\006NSCode\022\n\n"
    "\006NS_SUC\020\000\022\n\n\006NS_ERR\020\001*3\n\nNodeAction\022\007\n\003R"
    "eg\020\000\022\t\n\005UnReg\020\001\022\010\n\004Beat\020\002\022\007\n\003NUL\020\0032\222\001\n\013N"
    "ameService\022>\n\tHeartBeat\022\027.dist_storage.H"
    "BRequest\032\030.dist_storage.HBResponse\022C\n\014Ge"
    "tBuketList\022\030.dist_storage.CNSRequest\032\031.d"
    "ist_storage.CNSResponseB\003\200\001\001", 668);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "name_serv.proto", &protobuf_RegisterTypes);
  HBRequest::default_instance_ = new HBRequest();
  HBResponse::default_instance_ = new HBResponse();
  Bucket::default_instance_ = new Bucket();
  CNSRequest::_default_dist_alg_ =
      new ::std::string("ketama", 6);
  CNSRequest::default_instance_ = new CNSRequest();
  CNSResponse::default_instance_ = new CNSResponse();
  HBRequest::default_instance_->InitAsDefaultInstance();
  HBResponse::default_instance_->InitAsDefaultInstance();
  Bucket::default_instance_->InitAsDefaultInstance();
  CNSRequest::default_instance_->InitAsDefaultInstance();
  CNSResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_name_5fserv_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_name_5fserv_2eproto {
  StaticDescriptorInitializer_name_5fserv_2eproto() {
    protobuf_AddDesc_name_5fserv_2eproto();
  }
} static_descriptor_initializer_name_5fserv_2eproto_;
const ::google::protobuf::EnumDescriptor* NSCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NSCode_descriptor_;
}
bool NSCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NodeAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeAction_descriptor_;
}
bool NodeAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int HBRequest::kHostFieldNumber;
const int HBRequest::kActionFieldNumber;
const int HBRequest::kUpdatedTimeFieldNumber;
const int HBRequest::kDiskSpaceFieldNumber;
const int HBRequest::kMemSpaceFieldNumber;
const int HBRequest::kVisitFlowFieldNumber;
#endif  // !_MSC_VER

HBRequest::HBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dist_storage.HBRequest)
}

void HBRequest::InitAsDefaultInstance() {
}

HBRequest::HBRequest(const HBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dist_storage.HBRequest)
}

void HBRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_ = 3;
  updated_time_ = GOOGLE_LONGLONG(0);
  disk_space_ = GOOGLE_LONGLONG(0);
  mem_space_ = GOOGLE_LONGLONG(0);
  visit_flow_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HBRequest::~HBRequest() {
  // @@protoc_insertion_point(destructor:dist_storage.HBRequest)
  SharedDtor();
}

void HBRequest::SharedDtor() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void HBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HBRequest_descriptor_;
}

const HBRequest& HBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_name_5fserv_2eproto();
  return *default_instance_;
}

HBRequest* HBRequest::default_instance_ = NULL;

HBRequest* HBRequest::New() const {
  return new HBRequest;
}

void HBRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HBRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(updated_time_, visit_flow_);
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_->clear();
      }
    }
    action_ = 3;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dist_storage.HBRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // optional .dist_storage.NodeAction action = 2 [default = NUL];
      case 2: {
        if (tag == 16) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dist_storage::NodeAction_IsValid(value)) {
            set_action(static_cast< ::dist_storage::NodeAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_updated_time;
        break;
      }

      // optional int64 updated_time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_updated_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updated_time_)));
          set_has_updated_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_disk_space;
        break;
      }

      // optional int64 disk_space = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_disk_space:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &disk_space_)));
          set_has_disk_space();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mem_space;
        break;
      }

      // optional int64 mem_space = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_mem_space:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_space_)));
          set_has_mem_space();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_visit_flow;
        break;
      }

      // optional int64 visit_flow = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_visit_flow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &visit_flow_)));
          set_has_visit_flow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dist_storage.HBRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dist_storage.HBRequest)
  return false;
#undef DO_
}

void HBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dist_storage.HBRequest)
  // optional string host = 1 [default = ""];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // optional .dist_storage.NodeAction action = 2 [default = NUL];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  // optional int64 updated_time = 3 [default = 0];
  if (has_updated_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->updated_time(), output);
  }

  // optional int64 disk_space = 4 [default = 0];
  if (has_disk_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->disk_space(), output);
  }

  // optional int64 mem_space = 5 [default = 0];
  if (has_mem_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->mem_space(), output);
  }

  // optional int64 visit_flow = 6 [default = 0];
  if (has_visit_flow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->visit_flow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dist_storage.HBRequest)
}

::google::protobuf::uint8* HBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dist_storage.HBRequest)
  // optional string host = 1 [default = ""];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // optional .dist_storage.NodeAction action = 2 [default = NUL];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  // optional int64 updated_time = 3 [default = 0];
  if (has_updated_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->updated_time(), target);
  }

  // optional int64 disk_space = 4 [default = 0];
  if (has_disk_space()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->disk_space(), target);
  }

  // optional int64 mem_space = 5 [default = 0];
  if (has_mem_space()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->mem_space(), target);
  }

  // optional int64 visit_flow = 6 [default = 0];
  if (has_visit_flow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->visit_flow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dist_storage.HBRequest)
  return target;
}

int HBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string host = 1 [default = ""];
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional .dist_storage.NodeAction action = 2 [default = NUL];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional int64 updated_time = 3 [default = 0];
    if (has_updated_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updated_time());
    }

    // optional int64 disk_space = 4 [default = 0];
    if (has_disk_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->disk_space());
    }

    // optional int64 mem_space = 5 [default = 0];
    if (has_mem_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mem_space());
    }

    // optional int64 visit_flow = 6 [default = 0];
    if (has_visit_flow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->visit_flow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HBRequest::MergeFrom(const HBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_updated_time()) {
      set_updated_time(from.updated_time());
    }
    if (from.has_disk_space()) {
      set_disk_space(from.disk_space());
    }
    if (from.has_mem_space()) {
      set_mem_space(from.mem_space());
    }
    if (from.has_visit_flow()) {
      set_visit_flow(from.visit_flow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HBRequest::CopyFrom(const HBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HBRequest::IsInitialized() const {

  return true;
}

void HBRequest::Swap(HBRequest* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(action_, other->action_);
    std::swap(updated_time_, other->updated_time_);
    std::swap(disk_space_, other->disk_space_);
    std::swap(mem_space_, other->mem_space_);
    std::swap(visit_flow_, other->visit_flow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HBRequest_descriptor_;
  metadata.reflection = HBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HBResponse::kCodeFieldNumber;
#endif  // !_MSC_VER

HBResponse::HBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dist_storage.HBResponse)
}

void HBResponse::InitAsDefaultInstance() {
}

HBResponse::HBResponse(const HBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dist_storage.HBResponse)
}

void HBResponse::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HBResponse::~HBResponse() {
  // @@protoc_insertion_point(destructor:dist_storage.HBResponse)
  SharedDtor();
}

void HBResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HBResponse_descriptor_;
}

const HBResponse& HBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_name_5fserv_2eproto();
  return *default_instance_;
}

HBResponse* HBResponse::default_instance_ = NULL;

HBResponse* HBResponse::New() const {
  return new HBResponse;
}

void HBResponse::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dist_storage.HBResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dist_storage.NSCode code = 1 [default = NS_SUC];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dist_storage::NSCode_IsValid(value)) {
            set_code(static_cast< ::dist_storage::NSCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dist_storage.HBResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dist_storage.HBResponse)
  return false;
#undef DO_
}

void HBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dist_storage.HBResponse)
  // optional .dist_storage.NSCode code = 1 [default = NS_SUC];
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dist_storage.HBResponse)
}

::google::protobuf::uint8* HBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dist_storage.HBResponse)
  // optional .dist_storage.NSCode code = 1 [default = NS_SUC];
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dist_storage.HBResponse)
  return target;
}

int HBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dist_storage.NSCode code = 1 [default = NS_SUC];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HBResponse::MergeFrom(const HBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HBResponse::CopyFrom(const HBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HBResponse::IsInitialized() const {

  return true;
}

void HBResponse::Swap(HBResponse* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HBResponse_descriptor_;
  metadata.reflection = HBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bucket::kNumberFieldNumber;
const int Bucket::kNodeListFieldNumber;
#endif  // !_MSC_VER

Bucket::Bucket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dist_storage.Bucket)
}

void Bucket::InitAsDefaultInstance() {
}

Bucket::Bucket(const Bucket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dist_storage.Bucket)
}

void Bucket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  number_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bucket::~Bucket() {
  // @@protoc_insertion_point(destructor:dist_storage.Bucket)
  SharedDtor();
}

void Bucket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bucket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bucket_descriptor_;
}

const Bucket& Bucket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_name_5fserv_2eproto();
  return *default_instance_;
}

Bucket* Bucket::default_instance_ = NULL;

Bucket* Bucket::New() const {
  return new Bucket;
}

void Bucket::Clear() {
  number_ = GOOGLE_ULONGLONG(0);
  node_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dist_storage.Bucket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_list;
        break;
      }

      // repeated string node_list = 2;
      case 2: {
        if (tag == 18) {
         parse_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_node_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_list(this->node_list_size() - 1).data(),
            this->node_list(this->node_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dist_storage.Bucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dist_storage.Bucket)
  return false;
#undef DO_
}

void Bucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dist_storage.Bucket)
  // required uint64 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->number(), output);
  }

  // repeated string node_list = 2;
  for (int i = 0; i < this->node_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->node_list(i).data(), this->node_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "node_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->node_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dist_storage.Bucket)
}

::google::protobuf::uint8* Bucket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dist_storage.Bucket)
  // required uint64 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->number(), target);
  }

  // repeated string node_list = 2;
  for (int i = 0; i < this->node_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_list(i).data(), this->node_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->node_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dist_storage.Bucket)
  return target;
}

int Bucket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->number());
    }

  }
  // repeated string node_list = 2;
  total_size += 1 * this->node_list_size();
  for (int i = 0; i < this->node_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->node_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bucket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bucket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bucket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bucket::MergeFrom(const Bucket& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_list_.MergeFrom(from.node_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bucket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bucket::CopyFrom(const Bucket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bucket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Bucket::Swap(Bucket* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    node_list_.Swap(&other->node_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bucket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bucket_descriptor_;
  metadata.reflection = Bucket_reflection_;
  return metadata;
}


// ===================================================================

::std::string* CNSRequest::_default_dist_alg_ = NULL;
#ifndef _MSC_VER
const int CNSRequest::kDistAlgFieldNumber;
#endif  // !_MSC_VER

CNSRequest::CNSRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dist_storage.CNSRequest)
}

void CNSRequest::InitAsDefaultInstance() {
}

CNSRequest::CNSRequest(const CNSRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dist_storage.CNSRequest)
}

void CNSRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dist_alg_ = const_cast< ::std::string*>(_default_dist_alg_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNSRequest::~CNSRequest() {
  // @@protoc_insertion_point(destructor:dist_storage.CNSRequest)
  SharedDtor();
}

void CNSRequest::SharedDtor() {
  if (dist_alg_ != _default_dist_alg_) {
    delete dist_alg_;
  }
  if (this != default_instance_) {
  }
}

void CNSRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNSRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNSRequest_descriptor_;
}

const CNSRequest& CNSRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_name_5fserv_2eproto();
  return *default_instance_;
}

CNSRequest* CNSRequest::default_instance_ = NULL;

CNSRequest* CNSRequest::New() const {
  return new CNSRequest;
}

void CNSRequest::Clear() {
  if (has_dist_alg()) {
    if (dist_alg_ != _default_dist_alg_) {
      dist_alg_->assign(*_default_dist_alg_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNSRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dist_storage.CNSRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dist_alg = 1 [default = "ketama"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dist_alg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dist_alg().data(), this->dist_alg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dist_alg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dist_storage.CNSRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dist_storage.CNSRequest)
  return false;
#undef DO_
}

void CNSRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dist_storage.CNSRequest)
  // optional string dist_alg = 1 [default = "ketama"];
  if (has_dist_alg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dist_alg().data(), this->dist_alg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dist_alg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dist_alg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dist_storage.CNSRequest)
}

::google::protobuf::uint8* CNSRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dist_storage.CNSRequest)
  // optional string dist_alg = 1 [default = "ketama"];
  if (has_dist_alg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dist_alg().data(), this->dist_alg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dist_alg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dist_alg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dist_storage.CNSRequest)
  return target;
}

int CNSRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dist_alg = 1 [default = "ketama"];
    if (has_dist_alg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dist_alg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNSRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNSRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNSRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNSRequest::MergeFrom(const CNSRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dist_alg()) {
      set_dist_alg(from.dist_alg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNSRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNSRequest::CopyFrom(const CNSRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNSRequest::IsInitialized() const {

  return true;
}

void CNSRequest::Swap(CNSRequest* other) {
  if (other != this) {
    std::swap(dist_alg_, other->dist_alg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNSRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNSRequest_descriptor_;
  metadata.reflection = CNSRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CNSResponse::kRetCodeFieldNumber;
const int CNSResponse::kBucketListFieldNumber;
#endif  // !_MSC_VER

CNSResponse::CNSResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dist_storage.CNSResponse)
}

void CNSResponse::InitAsDefaultInstance() {
}

CNSResponse::CNSResponse(const CNSResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dist_storage.CNSResponse)
}

void CNSResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNSResponse::~CNSResponse() {
  // @@protoc_insertion_point(destructor:dist_storage.CNSResponse)
  SharedDtor();
}

void CNSResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CNSResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNSResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNSResponse_descriptor_;
}

const CNSResponse& CNSResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_name_5fserv_2eproto();
  return *default_instance_;
}

CNSResponse* CNSResponse::default_instance_ = NULL;

CNSResponse* CNSResponse::New() const {
  return new CNSResponse;
}

void CNSResponse::Clear() {
  ret_code_ = false;
  bucket_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNSResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dist_storage.CNSResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ret_code = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bucket_list;
        break;
      }

      // repeated .dist_storage.Bucket bucket_list = 2;
      case 2: {
        if (tag == 18) {
         parse_bucket_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bucket_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bucket_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dist_storage.CNSResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dist_storage.CNSResponse)
  return false;
#undef DO_
}

void CNSResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dist_storage.CNSResponse)
  // optional bool ret_code = 1 [default = false];
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ret_code(), output);
  }

  // repeated .dist_storage.Bucket bucket_list = 2;
  for (int i = 0; i < this->bucket_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bucket_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dist_storage.CNSResponse)
}

::google::protobuf::uint8* CNSResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dist_storage.CNSResponse)
  // optional bool ret_code = 1 [default = false];
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ret_code(), target);
  }

  // repeated .dist_storage.Bucket bucket_list = 2;
  for (int i = 0; i < this->bucket_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bucket_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dist_storage.CNSResponse)
  return target;
}

int CNSResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool ret_code = 1 [default = false];
    if (has_ret_code()) {
      total_size += 1 + 1;
    }

  }
  // repeated .dist_storage.Bucket bucket_list = 2;
  total_size += 1 * this->bucket_list_size();
  for (int i = 0; i < this->bucket_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bucket_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNSResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNSResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNSResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNSResponse::MergeFrom(const CNSResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  bucket_list_.MergeFrom(from.bucket_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNSResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNSResponse::CopyFrom(const CNSResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNSResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->bucket_list())) return false;
  return true;
}

void CNSResponse::Swap(CNSResponse* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    bucket_list_.Swap(&other->bucket_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNSResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNSResponse_descriptor_;
  metadata.reflection = CNSResponse_reflection_;
  return metadata;
}


// ===================================================================

NameService::~NameService() {}

const ::google::protobuf::ServiceDescriptor* NameService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* NameService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameService_descriptor_;
}

void NameService::HeartBeat(::google::protobuf::RpcController* controller,
                         const ::dist_storage::HBRequest*,
                         ::dist_storage::HBResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method HeartBeat() not implemented.");
  done->Run();
}

void NameService::GetBuketList(::google::protobuf::RpcController* controller,
                         const ::dist_storage::CNSRequest*,
                         ::dist_storage::CNSResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBuketList() not implemented.");
  done->Run();
}

void NameService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), NameService_descriptor_);
  switch(method->index()) {
    case 0:
      HeartBeat(controller,
             ::google::protobuf::down_cast<const ::dist_storage::HBRequest*>(request),
             ::google::protobuf::down_cast< ::dist_storage::HBResponse*>(response),
             done);
      break;
    case 1:
      GetBuketList(controller,
             ::google::protobuf::down_cast<const ::dist_storage::CNSRequest*>(request),
             ::google::protobuf::down_cast< ::dist_storage::CNSResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& NameService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dist_storage::HBRequest::default_instance();
    case 1:
      return ::dist_storage::CNSRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& NameService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dist_storage::HBResponse::default_instance();
    case 1:
      return ::dist_storage::CNSResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

NameService_Stub::NameService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
NameService_Stub::NameService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
NameService_Stub::~NameService_Stub() {
  if (owns_channel_) delete channel_;
}

void NameService_Stub::HeartBeat(::google::protobuf::RpcController* controller,
                              const ::dist_storage::HBRequest* request,
                              ::dist_storage::HBResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void NameService_Stub::GetBuketList(::google::protobuf::RpcController* controller,
                              const ::dist_storage::CNSRequest* request,
                              ::dist_storage::CNSResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace dist_storage

// @@protoc_insertion_point(global_scope)
